[
    %% hierdis Config
    {hierdis, [
        {data_root, "./data/hierdis"},

        {executable, "./priv/redis/redis-server"},
        {config_file, "./priv/riak_kv_redis_backend.redis.config"},

        %% The partition id will be appended to the end.  The total path including partition id must be less than 108 bytes.
        {unixsocket, "/tmp/redis.sock."},

        %% Tell the backend whether or not it should keep Redis running between Riak restarts.
        %% Default is `false`.
        {leave_running, false},

        %% Set the scheme with which data will be stored in Redis.
        %%    `kv`    Combines the `Bucket` and `Key` into <<"Bucket,Key">> and does GET/PUT/DELETE in Redis as
        %%            direct key/value GET/SET/DEL operations.
        %%
        %%    `hash`  Utilizes Redis' internal hash data structures.
        %%            `Bucket` becomes the name of the hash, `Key` is the key, and uses HGET/HSET/HDEL operations.
        %%            This scheme can produce some improvements in performance and memory utilization, but comes at
        %%            the expense of a ~4 Billion key per bucket per vnode limit.
        %% Default is `kv`.
        {storage_scheme, kv}
    ]},

    %% Riak Core config
 {riak_core, [
              %% Default location of ringstate
              {ring_state_dir, "{{ring_state_dir}}"},
              {platform_data_dir, "{{platform_data_dir}}"},

              %% riak_handoff_port is the TCP port that Riak uses for
              %% intra-cluster data handoff.
              {handoff_port, {{handoff_port}} },
              {ring_creation_size, 128}
             ]},

 %% SASL config
 {sasl, [
         {sasl_error_logger, {file, "log/sasl-error.log"}},
         {errlog_type, error},
         {error_logger_mf_dir, "log/sasl"},      % Log directory
         {error_logger_mf_maxbytes, 10485760},   % 10 MB max file size
         {error_logger_mf_maxfiles, 5}           % 5 files max
         ]}
].
